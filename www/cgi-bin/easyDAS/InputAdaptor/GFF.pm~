#########
# Author:        Bernat Gel
# Maintainer:    Bernat Gel
# Created:       2009-09-21
#
# This is a specialized InputAdaptor for the GFF file format. 
#
# 
###################################################################################
#  Code adapted from GFF3::Validator by 
#          Author: Payan Canaran (canaran@cshl.edu)
#          Copyright (c) 2006-2007 Cold Spring Harbor Laboratory
##################################################################################


package easyDAS::InputAdaptor::GFF;

use strict; 
use warnings;

use File::stat;
use Carp;
use Clone::Fast qw(clone);

use Data::Dumper;

use easyDAS::DBInterface;
use easyDAS::Data::Feature;


use base qw(easyDAS::InputAdaptor);

my $LARGEST_TEST_FILE = 10000000; #10MB - the size of the largest file to test completely

sub init {
  my ($self, $config) = @_;

  #Set the expected file extensions
  my @file_exts = ('gff', 'gff2', 'gff3');
  $self->{'file_extensions'} = \@file_exts;
  $self->{'error_message'} = "";
  $self->{'currently_in_fasta'} = 0; #at the beginning of the file we are NOT in a fasta section

  $self->{'gff_version'} = '0'; #by default, we do NOT know wich version of GFF we are working with
  
  print "(ed::IA::GFF-init): initializing FileGFF. filename=".$self->metadata->file_id."   original_filename=".$self->metadata->original_filename."   extension=".$self->metadata->extension."<br><br>\n" if($self->debug); 
 
  $self->{'debug'}=0; #OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
}


##################GETTERS/SETTERS#####################################################

sub gff_version {
    my ($self, $value) = @_;
    if (defined $value) {
      $self->{'gff_version'} = $value;
      $self->get_parsing_metadata->{'gff_version'} = $value;
    }
    print qq((ed::IA::GFF): The file is known to be a GFF version $value<br>\n) if($self->debug); 
    return $self->{'gff_version'};
}
	
sub currently_in_fasta {
   my ($self, $value) = @_;
   $self->{'currently_in_fasta'} = $value if (defined $value);
   return $self->{'currently_in_fasta'};
}

sub parsed_data {
   my ($self, $value) = @_;
   $self->{'parsed_data'} = $value if (defined $value);
   return $self->{'parsed_data'};
}


=head4 get_parsing_metadata

 Function  : Returns a valid parsing metadata. Creates or adapts it if necessary
 Arguments : 
 Returns   : $metadata
 
=cut
sub get_parsing_metadata {
  my ($self) = @_;
  
  my $meta = $self->metadata;

  if($meta->parsing) {# IF the FileMetadata has a parsing section
      if($meta->parsing->{'parser_type'} && $meta->parsing->{'parser_type'} eq 'GFF') { #IF the parsing section is of type GFF
	  return $meta->parsing;
      } #else, continue
  }
  #if arrived here, we don't have a valid parsing section. Create one
  #WARNING: WHAT IF the user forced the cuurent parsing type? We should not be here!!!
  $meta->parsing($self->create_parsing_metadata);
  return $meta->parsing;
}

=head4 create_parsing_metadata

 Function  : creates a parsing metadata section for the GFF format
 Arguments : 
 Returns   : $metadata

=cut
sub create_parsing_metadata {
  my ($self) = @_;
  
  my %parsing = (
    parser_type => "GFF",
    parser => "easyDAS::InputAdaptor::GFF",
    parser_parameters => {},
    data => [],
    num_data_lines => 5,
    remove_quotes => 1,
    data_fields => $self->get_data_fields(),
    attribute_names => {},
    mapping => [
	{data_field => 0, easyDAS_field => 'segment_id'},
	{data_field => 1, easyDAS_field => 'method_id'},
	{data_field => 2, easyDAS_field => 'type_id'},
	{data_field => 3, easyDAS_field => 'start'},
	{data_field => 4, easyDAS_field => 'end'},
	{data_field => 5, easyDAS_field => 'score'},
	{data_field => 6, easyDAS_field => 'orientation'},
	{data_field => 7, easyDAS_field => 'phase'}
    ]
  );
  return \%parsing;
}

sub get_data_fields {
  my ($self) = @_;
  return [
	{id=>'seqid', name=>'Sequence Id'},
	{id=>'source', name=>'Source'},
	{id=>'type', name=>'Type'},
	{id=>'start', name=>'Start'},
	{id=>'end', name=>'End'},
	{id=>'score', name=>'Score'},
	{id=>'strand', name=>'Strand'},
	{id=>'phase', name=>'Phase'}
    ];
}

sub reset_attribute_names {
  my ($self) = @_;
  $self->metadata->parsing->{'attribute_names'} = {};
  $self->metadata->parsing->{'data_fields'} = $self->get_data_fields();
}

sub add_attribute_name {
  my($self, $value) = @_;

  if(!$self->metadata->parsing->{'attribute_names'}->{$value}) {
#print "adding attribute name $value\n"; # to  because: ".Dumper($self->metadata->parsing->{'attribute_names'})."\n";
    $self->metadata->parsing->{'attribute_names'}->{$value} = 1;
    push(@{$self->metadata->parsing->{'data_fields'}}, {id=>"attribute_$value", name=>"Attribute $value"});
    $self->guess_mapping_for_field($value, (scalar @{$self->metadata->parsing->{'data_fields'}})-1);
  }
}

sub get_attribute_position {
  my ($self, $value) = @_;
  return $self->get_data_field_position("attribute_".$value);
}

sub get_data_field_position {
  my ($self, $value) = @_;
  my @a = @{$self->metadata->parsing->{'data_fields'}};
  my( $index )= grep { $a[$_]->{'id'} eq "$value" } 0..$#a;
  return $index;
}

sub get_attribute_names {
  my ($self) = @_;
  my $atn = $self->{'attribute_names'};
  return keys(%$atn);
}

  
################## "REAL" METHODS ###################################################
=head4 test

 Function  : Tests the file associated with this adaptor to determine if its a GFF file.
 Arguments : 
 Returns   : $score, a score for the probability of this file being a GFF. 0 for BEING a gff, 100 for completely NOT being a gff.
 
=cut
sub test {
  my ($self) = @_;

  print "(ia::FileGFF-test): Start testing for GFF format<br><br>\n" if($self->debug);

  #TODO: perform a first heuristic test. select 3 lines from the middle of the file ant test if they wheter are comments (start with #) or can be splitted in 8 parts by a tab.
  #TODO: What if they are on the FASTA part of a GFF3 file????

  $self->reset_error_score();
  $self->reset_attribute_names();
  $self->reset_types();
  $self->reset_methods();

  my $fileExt = $self->checkFileExtension();
  if(!$fileExt) {
    $self->add_error_score(40);
  }

  #open the data file
  my $fh = undef;
  $fh = $self->_fh();
  
  #create, if necessary, the parsing metadata
  $self->get_parsing_metadata();

  #Traverse it
  my $max_data_lines = $self->metadata->parsing->{'num_data_lines'}; #the number of data lines used to detect if the file is a valid GFF
  my $num_data_lines = 0;
  my $all_valid = 1; #assume its true if it does'nt fail
  my $line;
  my $line_num =0;
  my $file_size = $self->file_size();

  #walk the file line by line until max_data_lines lines of data have been found or we have entered the FASTA area
  LINE: while(($num_data_lines<$max_data_lines || $file_size<$LARGEST_TEST_FILE) && !$self->currently_in_fasta && ($line = <$fh>) && ++$line_num) {
	chomp($line); #remove any trailing space and newlines
	print qq(Line $line_num: $line<br>\n) if($self->debug);
	my $line_info;

	if($line =~ /^#/) {
	  $line_info = $self->parseHeaderLine($line); 
	} 
	elsif($line =~ /^>/) {
	  #While not strictly valid, it has been used berfore, so take it into account as the start of the FASTA part of the file
	  $self->currently_in_fasta(1);
	  $line_info->{'valid'} = 1;
	}
	else { #should be a standard data line 
	  $line_info = $self->testDataLine($line);
#print "Line Info: ".Dumper($line_info)."\n";
	  if($num_data_lines<$max_data_lines) {
	    my $d =$self->metadata->parsing->{'data'}; 
	    push(@$d, $line_info->{'data'}); #store the data read from that line
	    $num_data_lines++;
	  }
	}
	$all_valid &= $line_info->{'valid'};
	

	#Special cases
	#the first line in every GFF file is supposed to be ##gff-version, so if it's not, incrase error score.
	  if($line_num==1 && !($line=~/^##gff-version/)) {
	    $self->add_error_score(40);
	  }
  }

  $self->metadata->parsing->{'format_score'} = 100 - $self->normalized_error_score();

  print qq(The final score for the file is: ).$self->error_score()."<br>\n" if($self->debug);
  print qq(And error messages are: ).$self->error_message()."<br>\n" if($self->debug);
  print qq(<br>The metadata after test is: ).Dumper($self->metadata)."<br>\n" if($self->debug);

  return $self->normalized_error_score();
  
}

=head4 create_source

 Function  : Modifies the database tied to the DBInterface to add a new source based on the information on the file. 
             This function does NOT test for the validity of the data, metadata and file format. This MUST be done using the test function.
 Arguments : $DB - an easyDA::DBInterface opened and ready to work
 Returns   : $metadata - the given metadata with the source creation information added.
 
=cut
sub create_source {
  my ($self, $DB) = @_;

  my $parsed_data = {
    'features'	=> [],
    'types'	=> [],
    'methods'	=> [],
    'links'	=> [],
    'notes'	=> [],
    'parents'	=> [],
    'parts'	=> [],
    'segments'	=> []
  };

  $self->parsed_data($parsed_data);  #initialize the parsed data to "nothing"

  #NOTE: Since GFF file can have autoreferences (in parents and parts), we must parse the whole file first, then adapt the data and finally insert it into the DB
  $self->parse();
  
  $DB->create_source($self->metadata, $self->parsed_data);
  
  return $self->metadata;
}


########################  TESTING FUNCTION ##########################
sub parseHeaderLine {
   my ($self, $line, $nline) = @_;

   my $line_info = {
      nline => $nline,
      content => $line,
      valid => 1
   };
  
   # If this is a comment, do nothing
   if ($line =~ /^#[^#]/ or $line eq "#") {
        return $line_info; #because it's a valid comment in gff but not an "interesting one" (directive)
   }
   # If this is a directive, validate it
   elsif ($line =~ /^##/) {

        # Allowing multiple spaces
        $line =~ s/ +/ /g;

        # If a directive is invalid/malformed, it is not stored in the database
        # following variable is used to track errors
        my $valid_directive = 1;
	chomp($line); #To remove the trailing new-line
        if ($line =~ /^##gff-version/) {
	    $self->add_error_score(-80); #if the file says it's a GFF... well, it should be
            if ($line eq '##gff-version 3') {
		  $self->gff_version(3);
                }
	    elsif ($line eq '##gff-version 2') {
		  $self->gff_version(2);
	    } else {
		$self->error_message(qq(The gff version was not recognized in line $nline: ($line)<br>\n)); #store a note on that but do not fail.
            }
        }
        elsif ($line =~ /^##sequence-region/) {
            if ($line =~ /^##sequence-region \S+ \d+ \d+/) {
                $self->add_error_score(-20); #valid directives increase the probability of being a gff
            } else {
                $self->error_message(qq(There was a malformed sequece-region directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
        elsif ($line =~ /^##feature-ontology/) {
            if ($line =~ /^##feature-ontology (\S+)$/) {
                $self->add_ontology($1);
		$self->add_error_score(-20); #valid directives increase the probability of being a gff
            } else {
		$self->error_message(qq(There was a malformed feature-ontology directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
        elsif ($line =~ /^##attribute-ontology/) {
	    $self->add_error_score(-20); #valid directives increase the probability of being a gf	
            #never really used, so ignore           
	}
	elsif ($line =~ /^##source-ontology/) {
	    $self->add_error_score(-20); #valid directives increase the probability of being a gff
            #seems never used, so ignore
        }
        elsif ($line =~ /^###/) {
	  #Do nothing since we do not check the feature content
        }
        elsif ($line =~ /^##FASTA/) {
	    $self->add_error_score(-10); #valid directives increase the probability of being a gff, but FASTA is a common directive, so add less.
            if ($line eq '##FASTA') {
                $self->currently_in_fasta(1);
                }
            else {
                $self->error_message(qq(There was an error in the FASTA directive in line $nline: ($line)));
            }
        }
	elsif ($line =~ /^##species/) {
	    $self->add_error_score(-20); #valid directives increase the probability of being a gff
            if ($line =~ /^##species (\S+)$/) {
                $self->organism($1);
            } else {
		$self->error_message(qq(There was a malformed species directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
###############################easyDAS own non-standard directives ###################################
	elsif ($line =~ /^##source-name/) {
            if ($line =~ /^##source-name (\S+)$/) {
		$self->source_name($1);
            } else {
		$self->error_message(qq(There was a malformed source_name easyDAS directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
	elsif ($line =~ /^##source-title/) {
            if ($line =~ /^##source-title (.+)$/) {
		$self->source_title($1);
            } else {
		$self->error_message(qq(There was a malformed source_name easyDAS directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
	elsif ($line =~ /^##source-description/) {
            if ($line =~ /^##source-description (\S+)$/) {
                $self->source_description($1);
            } else {
		$self->error_message(qq(There was a malformed source_decription easyDAS directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
   	elsif ($line =~ /^##source-mantainer/ || $line =~ /^##source-maintainer/) {
            if ($line =~ /^##source-mantainer (\S+)$/) {
                $self->source_mantainer($1);
            } else if($line =~ /^##source-maintainer (\S+)$/) {
		$self->source_mantainer($1);	
	    } else {
		$self->error_message(qq(There was a malformed source_maintainer easyDAS directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
            }
        }
##############################END of easyDAS own directives ############################################
        else {
            $self->error_message(qq(There was an unknown directive in line $nline: $line<br>\n)); #store a note on that but do not fail.
        }

        return $line_info;
    }
}

#Parse a feature line and get its info. Return true iif the feature line is valid
sub testDataLine {
    #TODO: Keep track of the line numbers. So it would be possible to return useful information to the user
    my ($self, $line, $nline) = @_;

    my $line_info = {
      nline => $nline,
      content => $line,
      valid => 1
    };
  

    $self->reset_line_error_score();

    # Parse line
    my @fields = split("\t", $line);
    if (@fields != 9) {
        $self->error_message(qq(The line does NOT have 9 tab separated fields: ($line)));
	$self->add_line_error_score(100);
	$line_info->{'valid'} = 0;
        return $line_info;
    }

    #TODO: Save the actual data for testing purposes

    # Empty fields must have a dot
    foreach my $i (0..$#fields) {
      if ((!defined $fields[$i]) or $fields[$i] eq "") {
	 $self->error_message(qq(There's an empty field ($i) in this data line. Empty fields MUST have a dot on them: ($line)<br>\n));
	 $self->add_line_error_score(30); #While the standard says that empty fields MUST have a dot, thre are GFF files without them... add error, but do not return invalid
      }
    }

    #################################
    # The fields are processed here #
    #################################

    # Assign fields
    my ($seqid, $source, $type, $start, $end, $score, $strand, $phase, $attributes) = @fields;

      #Data returned as a hash
    #my $data = {}; #Store the data in the line_info structure
    #($data->{'seqid'}, $data->{'source'}, $data->{'type'}, $data->{'start'}, $data->{'end'},
#	$data->{'score'}, $data->{'strand'}, $data->{'phase'}) = @fields;
    #$line_info->{'data'} = $data; 
      #Data returned as an array
    my @vals = @fields[0..7];
    $line_info->{'data'} = \@vals;

    # Validate seqid
    if(defined $seqid) {
      if ($seqid =~ /[^a-zA-Z0-9\.\:\^\*\$\@\!\+\_\?\-\|\%]/) {
	  $self->error_message(qq(There's an invalid character in the seqid (first) field in the line: ($line)));
	  $self->add_line_error_score(10);
      }
      if ($seqid eq '.' or $seqid eq "") { #This is an error in GFF, but not serious for us, since the user can supply it via the GUI
	  $self->error_message(qq(The seqid (first) field in the line is empty: ($line)));
	  $self->add_line_error_score(5);
      }
    }

    # Validate source
    if(defined $source) {
      if ($source =~ /[^a-zA-Z0-9\.\: \^\*\$\@\!\+\_\?\-\%]/) {
	$self->error_message(qq(There's an invalid character in the source (second) field in line: ($line)<br>\n));
	$self->add_line_error_score(10);
      }
    }

    # Validate type
    if(defined $type) {
      if ($type =~ /[^a-zA-Z0-9\.\: \^\*\$\@\!\+\_\?\-]/) {
	  $self->error_message(qq(There's an invalid character in the type (third) field in the line: ($line)));
	  $self->add_line_error_score(10);
      } 
      if ($type eq '.' or $type eq "") {
	  $self->error_message(qq(The type (third) field in the line is empty: ($line)));
	  $self->add_line_error_score(5);
      } 
    }

    # Validate start and end
    if(defined $start and defined $end) {
	if ($start =~ /[^\d]/ or $end =~ /[^\d]/) {
	    $self->error_message(qq(There's an invalid character in the start or end (4th or 5th) field in the line: ($line)));
	    $self->add_line_error_score(50); #if start or end is not a number, it PROBABLY is not a GFF
	} else {
	    #we are sure they are numbers
	    if ($start < 1 or $end < 1) {
	      $self->error_message(qq(The number specified in the start or end (4th or 5th) field is less than 1 in the line (it can be a non-positional feature): ($line)));
	      $self->add_line_error_score(0);
	    } 
	    if ($end < $start) {
	      $self->message(qq(The field start (4th) is greater than the end (5th) in line: ($line)));
	    }
	}
	if(($start eq "" and $end ne "") or ($end eq "" and $start ne "")) {
	    #Only non-positional features will lack start AND end. HAving only one of them is STRANGE.
	    $self->add_line_error_score(40);
	}
    } 

    # Validate score
    if(defined $score) {
      if ($score ne "."                              and
	$score !~ /^[\+\-]{0,1}\d+\.\d+$/          and
	$score !~ /^[\+\-]{0,1}\d+$/               and
	$score !~ /^[\+\-]{0,1}\d+(e|E)[\+\-]\d+$/ and
	$score !~ /^[\+\-]{0,1}\d+\.\d+(e|E)[\+\-]\d+$/            
      ) {
	  $self->error_message(qq(The score (6th) field was not a number in line: ($line)));
	  $self->add_line_error_score(20);
      }
    }

    # Validate strand
    if(defined $strand) {
      if ($strand !~ /^[\+\-\.]$/) {
	$self->error_message(qq(The strand (7th) field is not [+/-/.] in line: ($line)));
	$self->add_line_error_score(15);
      }
    }

    # Validate phase
    if(defined $phase) {	
      if ($phase !~ /^[012\.]$/) {
	$self->error_message(qq(The phase (8th) field was not [0/1/2/.] (is $phase) in line: ($line)));
	#bbb$self->add_line_error_score(15);
      }	
    }

    #parse attributes field
    my $attr_info = $self->parse_attributes($attributes);
    if($attr_info->{'valid'}) {
	$self->add_line_error_score(-60); #having a valid attributes field increases the probability of being a GFF
	#print qq(Attributes are valid and their values are:).Dumper(%attr);
    } else {
	$self->add_line_error_score(20); #having an INvalid attributes field DEcreases the probability of being a GFF
	$self->error_message(qq(The attributes field (9th) is not valid in line: ($line)));
	#print qq(Attributes are NOT valid and their values are:).Dumper(%attr);
    }

    #copy the data in attr_info onto the line_info
    #%{$line_info->{'data'}} = (%{$line_info->{'data'}}, %{$attr_info->{'data'}}); #for Hash based data storage
    foreach my $k (keys(%{$attr_info->{'data'}})) { #for array based data storage, we have to find the right place to store it
	$self->add_attribute_name($k);
	my $index = $self->get_attribute_position($k);
	$line_info->{'data'}->[$index] = $attr_info->{'data'}->{$k};
    }

    
    #Finally, add some "bonus points" if any of the optional fields has a ".", since this is prety GFF specific
    if($source eq "." or $score eq "." or $strand eq "." or $phase eq "." ) {
      $self->add_line_error_score(-20);
    }

    if($self->line_error_score>70) { #Return a fail only if we are pretty sure it's not a GFF line
      $line_info->{'valid'} = 0;
      return $line_info; 
    } 

    $self->extract_extended_info($line_info->{'data'}); #extract the extended info (types, methods, etc...) from that line

    return $line_info;
}

#########################  PARSING FUNCTIONS #######################################################
sub parse {
  my ($self) = @_;

  print "(ia::FileGFF-parse): Start Parsing...<br><br>\n" if($self->debug);

  #open the data file
  my $fh = $self->_fh();

  #Traverse it
  my $num_data_lines = 0;
  my $line;
  my $line_num =0;
  
  #walk the file line by line, parsing its info and storing in $parsed_data. Stop if we arrive to a FASTA directive
  LINE: while(!$self->currently_in_fasta && ($line = <$fh>) && ++$line_num) {
	chomp($line); #remove any trailing space and newlines

	print qq(Parsed Line $line_num: $line<br>\n) if($self->debug);
	my $line_info;

	if($line =~ /^>/ || $line =~ /^##FASTA/) {
	  $self->currently_in_fasta(1);
	} elsif($line !~ /^#/) { #ignore the comments. Any directive have been processed in the test phase
	  my $feat = $self->parseDataLine($line, $line_num);
	 
	  $self->apply_defaults($feat);
	  push(@{$self->parsed_data->{'features'}}, $feat );
	  $num_data_lines++;
	}
  }
  
  #TODO: What parsing information is useful for the client? number of data lines... ids?
  print qq($num_data_lines were parsed<br>\n) if($self->debug);
    
  #Update metadata
  $self->metadata->parsed_data->{'parsed'} = 1;
  $self->metadata->parsed_data->{'features_parsed'} = $num_data_lines;

  return $self->metadata;
}


#Parse a feature line and get its info. Store it in the parsed_data strucure
sub parseDataLine {
    my ($self, $line, $line_num) = @_;

    # Parse line
    my @fields = split("\t", $line);
    if (@fields != 9) {
        return -1; #TODO: Return valid errors
    }

    #my ($orig_seqid, $orig_source, $orig_type, $orig_start, $orig_end, $orig_score, $orig_strand, $orig_phase, $orig_attr) = @fields;

    my $attr_info = $self->parse_attributes($fields[8]); #$orig_attr);
    my $attributes = $attr_info->{'data'}; 

    #and remove the attributes field from the array
    pop(@fields);
    #Store the attribute data to the "normal" data
    foreach my $k (keys(%{$attr_info->{'data'}})) { #for array based data storage, we have to find the right place to store it
	#$self->add_attribute_name($k); Ignore the attributes that are not in the array of attribute names, because those won't be mapped to anything
	my $index = $self->get_attribute_position($k);
	if($index) {
	  if($@{$attr_info->{'data'}->{$k}} > 1) {
	    $fields[$index] = $attr_info->{'data'}->{$k};
	  } else {
	    $fields[$index] = $attr_info->{'data'}->{$k}->[0]; #if it only has one value, flatten the array
	  }
	}
    }
    
    my $feature = $self->create_feature(\@fields, $line_num);
    
    return $feature;
}
  

######################## TESTING/PARSING COMMON FUNCTIONS ###########################33

sub parse_attributes {
    my($self, $attr_str) = @_;
    my $attr_valid;
    my $attr_info = {
      'valid' => 1,
      'data'  => {}
    };
    my $version = $self->metadata->parsing->{'gff_version'} || $self->{'gff_version'}; #get the version from metadata, and if not present, from object
    if ($attr_str eq '.') {
	return $attr_info;
    } else {
	if($version == 2) {
	  $attr_info = $self->parse_gff2_attributes($attr_str, $attr_info);
	} elsif($version == 3) {
	  $attr_info = $self->parse_gff3_attributes($attr_str, $attr_info);
	} else {
	  #if the version is not defined, try first ith gff3 (faster and better defined) and if it fails, try with gff2.
	  #TODO: if trying with one and the other, the error_messages may stack up
	  $attr_info = $self->parse_gff3_attributes($attr_str, $attr_info);
	  if(!$attr_info->{'valid'}) {
	     $attr_valid = $self->parse_gff2_attributes($attr_str, $attr_info);
	  }
	}
    }
    return $attr_info;
}


#THE CODE FOR THIS FUNCTION IS MAINLY BORROWED FROM THE BIOPERL PROJECT. Bio::Tools::GFF
#Slightly modified to suit our needs.
sub parse_gff2_attributes {
   my ($self, $attr_str, $attr_info) = @_;

   print qq(Parsing attributes with gff2 syntax<br>\n) if($self->debug);

   #  <Begin Inefficient Code from Mark Wilkinson> 
   # this routine is necessay to allow the presence of semicolons in
   # quoted text Semicolons are the delimiting character for new
   # tag/value attributes.  it is more or less a "state" machine, with
   # the "quoted" flag going up and down as we pass thorugh quotes to
   # distinguish free-text semicolon and hash symbols from GFF control
   # characters
   
   
   my $flag = 0; # this could be changed to a bit and just be twiddled
   my @parsed;

   # run through each character one at a time and check it
   # NOTE: changed to foreach loop which is more efficient in perl
   # --jasons
   for my $a ( split //, $attr_str ) { 
       # flag up on entering quoted text, down on leaving it
       if( $a eq '"') { $flag = ( $flag == 0 ) ? 1:0 }
       elsif( $a eq ';' && $flag ) { $a = "INSERT_SEMICOLON_HERE"}
       elsif( $a eq '#' && ! $flag ) { last } 
       push @parsed, $a;
   }
   $attr_str = join "", @parsed; # rejoin into a single string

   # <End Inefficient Code>   
   # Please feel free to fix this and make it more "perlish"

   my @key_vals = split /;/, $attr_str;   # attributes are semicolon-delimited

   foreach my $pair ( @key_vals ) {
       # replace semicolons that were removed from free-text above.
       $pair =~ s/INSERT_SEMICOLON_HERE/;/g;        

       # separate the key from the value
       my ($blank, $key, $values) = split  /^\s*([\w\d]+)\s/, $pair; 

       #print qq(key: $key<br>\nvalues: $values<br>\n);

       if(!defined $key) {
	  #$self->error_message(qq(The attributes field (9th) is not syntactically correct in GFF2. Trying with GFF3.));
	  #CAUTION: Is here where this should be treated?
	  #if the attributes parsing fails, try to give it to the gff3 parser, since the attributes has evolved gradually.
	  #mirbase hsa.gff is an example of file takingthis branch
	  return $self->parse_gff3_attributes($attr_str); 
       }

       if( defined $values ) {
	   my @values;
	   # free text is quoted, so match each free-text block
	   # and remove it from the $values string
	   while ($values =~ s/"(.*?)"//){
	       # and push it on to the list of values (tags may have
	       # more than one value... and the value may be undef)	       
	       push @values, $1;
	   }

	   # and what is left over should be space-separated
	   # non-free-text values

	   my @othervals = split /\s+/, $values;  
	   foreach my $othervalue(@othervals){
	       # get rid of any empty strings which might 
	       # result from the split
	       if (CORE::length($othervalue) > 0) {push @values, $othervalue}  
	   }

	   $attr_info->{'data'}->{$key} = \@values;
       } else { #All attributes have to be in the "key value" format.
	  $self->error_message(qq(There was a TAG ($key) without value in the attributes));
	  $attr_info->{'data'}->{$key} = 1;
       }
   }
   return $attr_info;
}


#parses the attributes field using the GF3 syntax (TAG=VALUE1,VALUE2;TAG2=VALUE;)
#THIS CODE IS MAINLY BORROWED FROM BIOPERL Bio::Tools::GFF.
#and slightly modified
#TODO: DOES THIS CODE ACTUALLY "FAIL" PARSING???? Even if the attributes is completely malformd, it does'nt fail....
sub parse_gff3_attributes {
    my ($self,  $attr_str, $attr_info) = @_;

    print qq(Parsing attributes with gff3 syntax<br>\n) if($self->debug);


    if($attr_str ne "." and rindex($attr_str, ";")!=length($attr_str)-1) {
      $self->error_message(qq(The last character of the string is not a ';'));
      #$self->add_error_score(20); #it's bad but can be a typical user error too.
      $attr_str .= ";"; #Add a semicolon and try to parse from that
    }

    my @groups = split(/\s*;\s*/, $attr_str);
    
    for my $group (@groups) {
	my ($tag,$value) = split /=/,$group;
	$tag             = unescape($tag);
	if(!defined $value) {
	  $self->error_message(qq(The attributes are not in the form TAG=VALUE. No value found.));
	  #$self->add_error_score(30); #since it's different between GFF2 and GFF3, we can not rule out GFF because of this
	  $self->add_attribute_name($tag);
	  $attr_info->{'data'}->{$tag} = 1;
	} else {
	  my @values       = map {unescape($_)} split /,/,$value;
	  if($self->metadata->parsing->{'remove_quotes'}) {
		  print "Escaping quotes\n" if($self->debug);
		  @values          = map {$self->escape_quotes($_)} @values; #values SHOULD be unquoted.... but, for example, hsa.gff from mirbase has them quoted
	  }
	  #for my $v ( @values ) {  $feat->add_tag_value($tag,$v); }
	  $attr_info->{'data'}->{$tag} = \@values;
	}
    }
  return $attr_info; #they seem like valid gff3 attributes
}


# taken from Bio::DB::GFF
sub unescape {
  my $v = shift;
  $v =~ tr/+/ /;
  $v =~ s/%([0-9a-fA-F]{2})/chr hex($1)/ge;
  return $v;
}


sub DESTROY {
  my $self = shift;
  if($self->{'fh'}) {
    close $self->{'fh'} or carp 'Error closing fh';
  }
  return;
}








###############################################################################################
#   END Of GFF3::Validator code
###############################################################################################

1;
__END__

=head1 NAME

Bio::Das::ProServer::SourceAdaptor::Transport::file

=head1 VERSION

$Revision: 567 $

=head1 SYNOPSIS

=head1 DESCRIPTION

A simple data transport for tab-separated files. Access is via the 'query' method.
Expects a tab-separated file with no header line.

Can optionally cache the file contents upon first usage. This may improve
subsequence response speed at the expense of memory footprint.

=head1 SUBROUTINES/METHODS

=head2 query - Execute a basic query against a text file

 Queries are of the form:

 $filetransport->query(qq(field1 = 'value'));
 $filetransport->query(qq(field1 lceq 'value'));
 $filetransport->query(qq(field3 like '%value%'));
 $filetransport->query(qq(field0 = 'value' && field1 = 'value'));
 $filetransport->query(qq(field0 = 'value' and field1 = 'value'));
 $filetransport->query(qq(field0 = 'value' and field1 = 'value' and field2 = 'value'));

 "OR" compound queries not (yet) supported

=head2 last_modified - machine time of last data change

  $dbitransport->last_modified();

=head2 DESTROY - object destructor - disconnect filehandle

  Generally not directly invoked, but if you really want to - 

  $filetransport->DESTROY();

=head1 DIAGNOSTICS

Run ProServer with the -debug flag.

=head1 CONFIGURATION AND ENVIRONMENT

Configured as part of each source's ProServer 2 INI file:

  [myfile]
  ... source configuration ...
  transport = file
  filename  = /data/features.tsv
  unique    = 1 # optional
  cache     = 1 # optional

=head1 DEPENDENCIES

=over

=item L<File::stat>

=item L<Bio::Das::ProServer::SourceAdaptor::Transport::generic>

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

Only AND compound queries are supported.

=head1 AUTHOR

Roger Pettett <rmp@sanger.ac.uk> and Andy Jenkinson <aj@ebi.ac.uk>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2008 The Sanger Institute and EMBL-EBI

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See DISCLAIMER.txt for
disclaimers of warranty.

=cut
