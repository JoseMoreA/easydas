.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Das::ProServer::SourceAdaptor::file 3"
.TH Bio::Das::ProServer::SourceAdaptor::file 3 "2009-10-20" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Das::ProServer::SourceAdaptor::file \- adaptor for file\-based DAS sources
.SH "VERSION"
.IX Header "VERSION"
$Revision: 578 $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Das::ProServer::SourceAdaptor
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This SourceAdaptor plugin allows for a full-featured \s-1DAS\s0 source (implementing
the features command) to be created from one of a variety of simple text files.
Fields that are not present in the data file may optionally be provided in the
source's configuration, in which case these data will be \*(L"filled in\*(R".
See the \s-1CONFIGURATION\s0 section for full details/examples.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Jenkinson <aj@ebi.ac.uk>
.SH "METHODS"
.IX Header "METHODS"
.Sh "init"
.IX Subsection "init"
Initialises the adaptor, performing some optimisation and setting the
appropriate capabilities of the \s-1DAS\s0 source depending on the queries that are
configured in the \s-1INI\s0 configuration.
.Sh "build_features"
.IX Subsection "build_features"
Builds feature structures. Called by the das_features and build_types methods.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.Vb 16
\&  [sourcename]
\&  state         = on
\&  adaptor       = file
\&  coordinates   = NCBI_36,Chromosome,Homo sapiens -> X:100,200
\&  mapmaster     = http://www.ensembl.org/das/Homo_sapiens.NCBI36.reference
\&  homepage      = http://www.example.com/project/
\&  title         = Example source
\&  description   = An example DAS source backed by a flat file
\&  # Transport parameters:
\&  filename      = %serverroot/eg/data/mysimple.txt
\&  cache         = yes
\&  # Adaptor parameters:
\&  cols          = segment,start,end,ori,type
\&  feature_query = field0 = %segment and field2 >= %start and field1 <= %end
\&  fid_query     = field3 = %feature_id
\&  gid_query     = field4 = %group_id
.Ve
.PP
\fIfilename (required)\fR
.IX Subsection "filename (required)"
.PP
Text file location
.PP
\fIcache (optional)\fR
.IX Subsection "cache (optional)"
.PP
Cache file contents \- faster but increases memory footprint
.PP
\fIcols (required)\fR
.IX Subsection "cols (required)"
.PP
The order of the columns in the data file, separated by commas
.PP
\fIfeature_query (required)\fR
.IX Subsection "feature_query (required)"
.PP
The query to use for segment-based queries. \f(CW%segment\fR, \f(CW%start\fR and \f(CW%end\fR will be
replaced with their respective values from a \s-1DAS\s0 request.
.PP
\fIfid_query (optional)\fR
.IX Subsection "fid_query (optional)"
.PP
The query to use for feature ID-based queries. \f(CW%feature_id\fR will be replaced with
the appropriate value from a \s-1DAS\s0 request.
.PP
\fIgid_query (optional)\fR
.IX Subsection "gid_query (optional)"
.PP
The query to use for group ID-based queries. \f(CW%group_id\fR will be replaced with
the appropriate value from a \s-1DAS\s0 request.
.PP
\fI\*(L"fill\-in\*(R" attributes\fR
.IX Subsection "fill-in attributes"
.PP
By specifying other parameters in the \s-1INI\s0 configuration, it is possible to \*(L"fill
in\*(R" attributes that are not included as columns in the data file. For example,
if all features were generated using the same method, it can be specified in the
\&\s-1INI\s0 file:
.PP
.Vb 5
\&  [mysource]
\&  ...
\&  # Fill-in properties:
\&  typecategory  = transcription
\&  method        = Genscan
.Ve
.PP
The supported parameters are:
.PP
.Vb 3
\&  method method_label note link linktxt score segment start end ori phase
\&  feature_id feature_label type typetxt typecategory typesubparts typesuperparts
\&  typereference group_id grouplabel grouptype groupnote grouplink grouplinktxt
.Ve
.PP
It is also possible for such properties to include placeholders, which will be
dynamically substituted for the appropriate column in each feature:
.PP
.Vb 4
\&  [mysource]
\&  ...
\&  # Fill-in properties:
\&  link   = http://example.com?chromosome=%segment;type=%type
.Ve
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Although this module supports the \*(L"filling in\*(R" of feature properties from the
source's \s-1INI\s0 configuration, it only supports the setting of non-scalar values.
It is therefore not possible to set more than one note, link or group.
.PP
Also, the setting of \*(L"target\*(R" properties in this way is at present not supported
(each feature's target is likely to be dynamic anyway).
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2008 EMBL-EBI
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
