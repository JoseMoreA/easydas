.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Das::ProServer::Config 3"
.TH Bio::Das::ProServer::Config 3 "2010-04-14" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Das::ProServer::Config \- configuration parsing and hooks
.SH "VERSION"
.IX Header "VERSION"
$Revision: 607 $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Builds the ProServer configuration.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Configuration takes the following structure
.PP
.Vb 21
\&  [general]
\&  interface         = *    # interface to bind to ('*' for all)
\&  port              = 9000 # port to listen on
\&  ; response_* attributes for servers behind a reverse proxy:
\&  response_hostname =      # overriding hostname for responses
\&  response_port     =      # overriding port for responses
\&  response_protocol =      # overriding protocol (http/s) for responses
\&  response_baseuri  =      # overriding base-uri for responses
\&  maxclients        = 10
\&  pidfile           = 
\&  logfile           = 
\&  ensemblhome       =      # path to ensembl libs (for sharing across sources)
\&  oraclehome        =      # path to oracle libs  (for sharing across sources)
\&  bioperlhome       =      # path to bioperl libs (for sharing across sources)
\&  serverroot        =      # path to root directory (for stylesheets/coordinates)
\&  coordshome        =      # path to coordinate systems XML files
\&  styleshome        =      # path to stylesheet XML files
\&  http_proxy        =      # proxy for sources requiring web access
\&  maintainer        =      # email address
\&  strict_boundaries =      # whether to filter out-of-range segments
\&  logformat         = %i %t %r %s
.Ve
.PP
.Vb 7
\&  # then many of these with directives specific to each source
\&  [sourcename]
\&  adaptor        = adaptorpackage
\&  title          = Source Name
\&  description    = A description of The Source.
\&  stylesheetfile = /path/to/stylesheet.xml
\&  ...
.Ve
.PP
.Vb 6
\&  # e.g. for mysql:
\&  transport = dbi
\&  dbhost    = localhost
\&  dbport    = 3306
\&  dbuser    = proserverro
\&  dbpass    = password
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.Sh "new \- Constructor"
.IX Subsection "new - Constructor"
.Vb 1
\&  my $oConfig = Bio::Das::ProServer::Config->new("/path/to/proserver.ini");
.Ve
.Sh "port \- get accessor for configured port"
.IX Subsection "port - get accessor for configured port"
.Vb 1
\&  my $sPort = $oConfig->port();
.Ve
.Sh "maxclients \- get/set accessor for configured maxclients"
.IX Subsection "maxclients - get/set accessor for configured maxclients"
.Vb 1
\&  my $sMaxClients = $oConfig->maxclients();
.Ve
.Sh "pidfile \- get accessor for configured pidfile"
.IX Subsection "pidfile - get accessor for configured pidfile"
.Vb 1
\&  my $sPidFile = $oConfig->pidfile();
.Ve
.Sh "logfile \- get accessor for configured logfile"
.IX Subsection "logfile - get accessor for configured logfile"
.Vb 1
\&  my $sLogFile = $oConfig->logfile();
.Ve
.Sh "logformat \- get accessor for configured logformat"
.IX Subsection "logformat - get accessor for configured logformat"
.Vb 1
\&  my $sLogformat = $oConfig->logformat();
.Ve
.PP
.Vb 6
\&  Special variables:
\&  %i      Remote IP
\&  %h      Remote hostname
\&  %t      Local time (YYYY-MM-DDTHH:MM:SS)
\&  %r      Request URI
\&  %s      HTTP status code
.Ve
.Sh "host \- get accessor for configured host"
.IX Subsection "host - get accessor for configured host"
.Vb 1
\&  my $sHost = $cfg->host();
.Ve
.PP
.Vb 1
\&  Examines 'interface' and 'hostname' settings in that order
.Ve
.Sh "response_hostname \- get accessor for configured response_hostname"
.IX Subsection "response_hostname - get accessor for configured response_hostname"
.Vb 1
\&  Useful for setting the hostname in XML/HTML responses when behind a reverse-proxy.
.Ve
.PP
.Vb 1
\&  my $sResponse_Hostname = $cfg->response_hostname();
.Ve
.PP
.Vb 1
\&  Examines 'response_hostname', 'interface' and 'hostname' settings in that order
.Ve
.Sh "response_port \- get accessor for configured response_port"
.IX Subsection "response_port - get accessor for configured response_port"
.Vb 1
\&  Useful for setting the port in XML/HTML responses when behind a reverse-proxy.
.Ve
.PP
.Vb 1
\&  my $sResponse_Port = $cfg->response_port();
.Ve
.PP
.Vb 1
\&  Examines 'response_port' and 'port' settings in that order
.Ve
.Sh "response_protocol \- get accessor for configured response_protocol"
.IX Subsection "response_protocol - get accessor for configured response_protocol"
.Vb 1
\&  Useful for setting the protocol in XML/HTML responses when behind a reverse-proxy.
.Ve
.PP
.Vb 1
\&  my $sResponse_Protocol = $cfg->response_protocol();
.Ve
.Sh "response_baseuri \- get accessor for configured response_baseuri"
.IX Subsection "response_baseuri - get accessor for configured response_baseuri"
.Vb 1
\&  Useful for setting the baseuri (i.e. preceeding /das) in XML/HTML responses when behind a reverse-proxy.
.Ve
.PP
.Vb 1
\&  my $sResponse_Baseuri = $cfg->response_baseuri();
.Ve
.Sh "interface \- get accessor configured interface"
.IX Subsection "interface - get accessor configured interface"
.Vb 1
\&  my $sInterface = $cfg->interface();
.Ve
.Sh "adaptors \- Build all known Bio::Das::ProServer::SourceAdaptors (including those Hydra\-based)"
.IX Subsection "adaptors - Build all known Bio::Das::ProServer::SourceAdaptors (including those Hydra-based)"
.Vb 1
\&  my @aAdaptors = $oConfig->adaptors();
.Ve
.PP
.Vb 1
\&  Note this can be an expensive call if lots of sources or large hydra sets are configured.
.Ve
.Sh "adaptor \- Build a SourceAdaptor given a dsn (may be a hydra-based adaptor)"
.IX Subsection "adaptor - Build a SourceAdaptor given a dsn (may be a hydra-based adaptor)"
.Vb 1
\&  my $oSourceAdaptor = $oConfig->adaptor($sWantedDSN);
.Ve
.Sh "knows \- Is a requested dsn known about?"
.IX Subsection "knows - Is a requested dsn known about?"
.Vb 1
\&  my $bDSNIsKnown = $oConfig->knows($sWantedDSN);
.Ve
.Sh "das_version \- Server-supported das version"
.IX Subsection "das_version - Server-supported das version"
.Vb 1
\&  my $sVersion = $oConfig->das_version();
.Ve
.PP
.Vb 1
\&  By default 'DAS/1.53E';
.Ve
.Sh "server_version \- Server release version"
.IX Subsection "server_version - Server release version"
.Vb 1
\&  my $sVersion = $oConfig->server_version();
.Ve
.PP
.Vb 1
\&  By default 'ProServer/2.7';
.Ve
.Sh "hydra_adaptor \- Build a hydra-based SourceAdaptor given dsn and optional hydraname"
.IX Subsection "hydra_adaptor - Build a hydra-based SourceAdaptor given dsn and optional hydraname"
.Vb 1
\&  my $oAdaptor = $oConfig->hydra_adaptor($sWantedDSN, $sHydraName); # fast
.Ve
.PP
.Vb 1
\&  my $oAdaptor = $oConfig->hydra_adaptor($sWantedDSN); # slow, performs a full scan of any configured hydras
.Ve
.Sh "hydra \- Build SourceHydra for a given dsn/hydraname"
.IX Subsection "hydra - Build SourceHydra for a given dsn/hydraname"
.Vb 1
\&  my $oHydra = $oConfig->hydra($sHydraName);
.Ve
.Sh "log \- log to \s-1STDERR\s0 with timestamp"
.IX Subsection "log - log to STDERR with timestamp"
.Vb 1
\&  $oConfig->log('a message');
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.SH "AUTHOR"
.IX Header "AUTHOR"
Roger Pettett <rmp@sanger.ac.uk>.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2006 The Sanger Institute
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
